spring:
  application:
    name: notification
  cloud:
    function:
      definition: orderCreated
    stream:
      function:
        definition: orderCreated
      bindings:
        orderCreated-in-0:
          destination: order.notification
          group: notification-group
          content-type: application/json
      kafka:
        binder:
          brokers: kafka:9092
#  cloud:
#    function:
#      definition: orderCreated
#    stream:
#      function:
#        definition: orderCreated
#      bindings:
#        orderCreated-in-0:
#          destination: order.exchange
#          group: notification-group
#          content-type: application/json
#      kafka:
#        binder:
#          brokers: localhost:9092
#      rabbit:
#        bindings:
#          createOrder-out-0:
#            producer:
#              routing-key-expression: '''order.tracking'''
##  rabbitmq:
#    host: ${RABBITMQ_HOST:localhost}
#    port: ${RABBITMQ_PORT:5672}
#    username: ${RABBITMQ_USERNAME:guest}
#    password: ${RABBITMQ_PASSWORD:guest}
#    virtual-host: ${RABBITMQ_VHOST:guest}
#  rabbitmq:
#    host: ${RABBITMQ_HOST}
#    port: ${RABBITMQ_PORT}
#    username: ${RABBITMQ_USERNAME}
#    password: ${RABBITMQ_PASSWORD}
#    virtual-host: ${RABBITMQ_VHOST}
#    ssl:
#      enabled: true
#
#    connection-timeout: 30000


server:
  port: 8084





rabbitmq:
  exchange:
    name: order.exchange
  queue:
    name: order.queue
  routing:
    key: order.tracking
