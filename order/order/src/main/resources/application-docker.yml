spring:
  application:
    name: order




  datasource:
    url: jdbc:h2:mem:test
    username: sa
    password:

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true

  cloud:
    config:
      enabled: false
    stream:
      bindings:
        createOrder-out-0:
          destination: order.exchange
          content-type: application/json
        updateOrderStatus-in-0:
          destination: payment.exchange
          group: order-group
          content-type: application/json
        updateOrderStatus-out-0:
          destination: order.notification
          content-type: application/json
      kafka:
        binder:
          brokers: kafka:9092   # use container name, not localhost

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
  health:
    circuitbreakers:
      enabled: true
  tracing:
    sampling:
      probability: 1.0

server:
  port: 8083

app:
  message: "HELLO Order"

logging:
  file:
    name: logs/order.log
  logback:
    rollingpolicy:
      max-file-size: 5MB
      max-history: 7

resilience4j:
  circuitbreaker:
    instances:
      productService:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        waitDurationInOpenState: 10s
        failureRateThreshold: 50
        automaticTransitionFromOpenToHalfOpenEnabled: true
        slidingWindowType: count_based
  retry:
    instances:
      retryBreaker:
        maxAttempts: 5
        waitDuration: 500ms
  ratelimiter:
    instances:
      rateBreaker:
        timeout-duration: 0
        limit-refresh-period: 4s
        limit-for-period: 2
